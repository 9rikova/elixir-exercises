defmodule SudokuSolverTest do
  use ExUnit.Case
  doctest SudokuSolver

  test "solve the sudoku" do
    sudoku = [
      [0, 7, 0, 5, 8, 3, 0, 2, 0],
      [0, 5, 9, 2, 0, 0, 3, 0, 0],
      [3, 4, 0, 0, 0, 6, 5, 0, 7],
      [7, 9, 5, 0, 0, 0, 6, 3, 2],
      [0, 0, 3, 6, 9, 7, 1, 0, 0],
      [6, 8, 0, 0, 0, 2, 7, 0, 0],
      [9, 1, 4, 8, 3, 5, 0, 7, 6],
      [0, 3, 0, 7, 0, 1, 4, 9, 5],
      [5, 6, 7, 4, 2, 9, 0, 1, 3]
    ]
    assert SudokuSolver.solve(sudoku) == [
      [1, 7, 6, 5, 8, 3, 9, 2, 4],
      [8, 5, 9, 2, 7, 4, 3, 6, 1],
      [3, 4, 2, 9, 1, 6, 5, 8, 7],
      [7, 9, 5, 1, 4, 8, 6, 3, 2],
      [4, 2, 3, 6, 9, 7, 1, 5, 8],
      [6, 8, 1, 3, 5, 2, 7, 4, 9],
      [9, 1, 4, 8, 3, 5, 2, 7, 6],
      [2, 3, 8, 7, 6, 1, 4, 9, 5],
      [5, 6, 7, 4, 2, 9, 8, 1, 3]
    ]
  end

  test "return empty list when sudoku is unsolvable" do
    sudoku = [
      [0, 7, 0, 5, 8, 3, 0, 2, 0],
      [1, 5, 9, 2, 0, 0, 3, 0, 0],
      [3, 4, 0, 0, 0, 6, 5, 0, 7],
      [7, 9, 5, 0, 0, 0, 6, 3, 2],
      [0, 0, 3, 6, 9, 7, 1, 0, 0],
      [6, 8, 0, 0, 0, 2, 7, 0, 0],
      [9, 1, 4, 8, 3, 5, 0, 7, 6],
      [0, 3, 0, 7, 0, 1, 4, 9, 5],
      [5, 6, 7, 4, 2, 9, 0, 1, 3]
    ]
    assert SudokuSolver.solve(sudoku) == []
  end

  test "solve the sudoku async" do
    sudoku = [
      [0, 7, 0, 5, 8, 3, 0, 2, 0],
      [0, 5, 9, 2, 0, 0, 3, 0, 0],
      [3, 4, 0, 0, 0, 6, 5, 0, 7],
      [7, 9, 5, 0, 0, 0, 6, 3, 2],
      [0, 0, 3, 6, 9, 7, 1, 0, 0],
      [6, 8, 0, 0, 0, 2, 7, 0, 0],
      [9, 1, 4, 8, 3, 5, 0, 7, 6],
      [0, 3, 0, 7, 0, 1, 4, 9, 5],
      [5, 6, 7, 4, 2, 9, 0, 1, 3]
    ]
    assert SudokuSolver.solve(sudoku, :list, :async) == [
      [1, 7, 6, 5, 8, 3, 9, 2, 4],
      [8, 5, 9, 2, 7, 4, 3, 6, 1],
      [3, 4, 2, 9, 1, 6, 5, 8, 7],
      [7, 9, 5, 1, 4, 8, 6, 3, 2],
      [4, 2, 3, 6, 9, 7, 1, 5, 8],
      [6, 8, 1, 3, 5, 2, 7, 4, 9],
      [9, 1, 4, 8, 3, 5, 2, 7, 6],
      [2, 3, 8, 7, 6, 1, 4, 9, 5],
      [5, 6, 7, 4, 2, 9, 8, 1, 3]
    ]
  end
end
